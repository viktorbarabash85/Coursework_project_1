import json
from typing import Generator
from unittest.mock import MagicMock, mock_open, patch

import pytest

# Фикстуры для Веб-страницы. Страница "Главная"


@pytest.fixture
def mock_generate_main_page_data() -> MagicMock:
    """
    Фикстура для мока функции generate_main_page_data.
    """
    mock_func = MagicMock()
    mock_func.return_value = {
        "greeting": "Добрый день",
        "cards": [{"card_number": "1234", "total_spent": 100, "cashback": 1}],
        "top_transactions": [{"amount": 100}],
        "currency_rates": {"USD": 75.5, "EUR": 80.2},
        "stock_prices": {"AAPL": 150, "GOOGL": 2800},
    }
    return mock_func


@pytest.fixture
def mock_load_user_settings() -> Generator:
    """Фикстура для замены функции загрузки пользовательских настроек."""
    with patch("utils.load_user_settings") as mock_settings:
        mock_settings.return_value = {"user_currencies": ["USD", "EUR"], "user_stocks": ["AAPL", "GOOGL"]}
        yield mock_settings  # Возвращаем замоканную функцию


@pytest.fixture
def test_operations_data() -> list[dict]:
    """Фикстура для тестовых данных операций."""
    return [
        {"Дата операции": "2023-10-01", "Сумма операции": -1000, "Номер карты": "1234", "Категория": "покупка"},
        {"Дата операции": "2023-10-02", "Сумма операции": -200, "Номер карты": "5678", "Категория": "переводы"},
        {"Дата операции": "2023-10-03", "Сумма операции": -900, "Номер карты": "1234", "Категория": "покупка"},
        {"Дата операции": "2023-10-04", "Сумма операции": -200, "Номер карты": "5678", "Категория": "переводы"},
        {"Дата операции": "2023-10-05", "Сумма операции": -550, "Номер карты": "1234", "Категория": "покупка"},
        {"Дата операции": "2023-10-06", "Сумма операции": -200, "Номер карты": "5678", "Категория": "переводы"},
    ]


# @pytest.fixture
# def mock_api_response():
#     """Фикстура для замены ответов API."""
#     with patch('requests.get') as mock_get:
#         yield mock_get  # Возвращаем замоканную функцию

# @pytest.fixture
# def set_env_variables(monkeypatch):
#     """Фикстура для установки переменных окружения."""
#     monkeypatch.setenv("API_KEY", "test_api_key")  # Устанавливаем переменную окружения
#     yield  # Возвращаем управление для выполнения тестов
#     monkeypatch.undo()  # Возвращаем переменные окружения к исходному состоянию


#
# @pytest.fixture
# def mock_date_input():
#     """Фикстура для замены ввода даты."""
#     with patch("builtins.input", return_value="2024-01-01 12:00:00"):
#         yield
#
# @pytest.fixture
# def mock_file_operations_data():
#     """Фикстура для мокирования данных из файла Excel."""
#     mock_data = [
#         {"Дата операции": "2024-01-01", "Номер карты": "1234", "Сумма операции": -100.0, "Категория": "покупки"},
#         {"Дата операции": "2024-01-02", "Номер карты": "5678", "Сумма операции": -200.0, "Категория": "покупки"},
#     ]
#     with patch("pandas.read_excel", return_value=pd.DataFrame(mock_data)):
#         yield mock_data


@pytest.fixture
def mock_user_settings() -> Generator:
    """Фикстура для мокирования пользовательских настроек."""
    settings = {"user_currencies": ["USD", "EUR"], "user_stocks": ["AAPL", "TSLA"]}
    with patch("builtins.open", mock_open(read_data=json.dumps(settings))):
        yield settings


@pytest.fixture
def mock_requests_get() -> Generator:
    """Фикстура для мокирования HTTP запросов."""
    with patch("requests.get") as mock_get:
        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = {
            "conversion_rates": {"RUB": 74.5},
            "results": [{"c": 125.0}],
        }
        yield mock_get


# Фикстуры для Сервисы. "Выгодные категории повышенного кешбэка"
@pytest.fixture
def mock_operations_data_2() -> list[dict]:
    return [
        {"Дата операции": "2023-03-01", "Категория": "Еда", "Сумма операции": -1000, "Статус": "SUCCESS"},
        {"Дата операции": "2023-03-02", "Категория": "Транспорт", "Сумма операции": -500, "Статус": "SUCCESS"},
        {"Дата операции": "2023-03-03", "Категория": "Развлечения", "Сумма операции": -2000, "Статус": "SUCCESS"},
        {"Дата операции": "2023-03-04", "Категория": "Переводы", "Сумма операции": -1500, "Статус": "SUCCESS"},
        {"Дата операции": "2023-03-05", "Категория": "Наличные", "Сумма операции": -100, "Статус": "FAILED"},
    ]


@pytest.fixture
def mock_operations_data_filtered() -> list[dict]:
    return [
        {"Дата операции": "2023-03-01", "Категория": "Еда", "Статус": "SUCCESS", "Сумма операции": -1000},
        {"Дата операции": "2023-03-02", "Категория": "Транспорт", "Статус": "SUCCESS", "Сумма операции": -500},
        {"Дата операции": "2023-03-03", "Категория": "Развлечения", "Статус": "SUCCESS", "Сумма операции": -2000},
        {"Дата операции": "2023-03-04", "Категория": "Кафе", "Статус": "SUCCESS", "Сумма операции": -1500},
        {"Дата операции": "2023-03-05", "Категория": "Образование", "Статус": "SUCCESS", "Сумма операции": -3000},
        {"Дата операции": "2023-03-06", "Категория": "Спорт", "Статус": "SUCCESS", "Сумма операции": -1200},
        {"Дата операции": "2023-03-07", "Категория": "Путешествия", "Статус": "SUCCESS", "Сумма операции": -2500},
        {"Дата операции": "2023-03-08", "Категория": "Магазин", "Статус": "SUCCESS", "Сумма операции": -800},
        {"Дата операции": "2023-03-09", "Категория": "Книги", "Статус": "SUCCESS", "Сумма операции": -600},
        {"Дата операции": "2023-03-10", "Категория": "Здоровье", "Статус": "SUCCESS", "Сумма операции": -400},
        {"Дата операции": "2023-03-11", "Категория": "Развлечения", "Статус": "SUCCESS", "Сумма операции": -1800},
        {"Дата операции": "2023-03-12", "Категория": "Транспорт", "Статус": "SUCCESS", "Сумма операции": -700},
        {"Дата операции": "2023-03-13", "Категория": "Еда", "Статус": "SUCCESS", "Сумма операции": -1300},
        {"Дата операции": "2023-03-14", "Категория": "Образование", "Статус": "SUCCESS", "Сумма операции": -900},
    ]


@pytest.fixture
def mock_load_operations_data() -> dict:
    return {"Дата операции": "2020-03-15", "Категория": "Переводы", "Сумма операции": 100, "Статус": "SUCCESS"}


# @pytest.fixture
# def mock_logger_error():
#     return {
#         "Дата операции": "2020/03/15",
#         "Категория": "Продукты",
#         "Сумма операции": -1000,
#         "Статус": "OK"
#     }
